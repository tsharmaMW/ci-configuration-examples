# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ generateExecutable ]
  pull_request:
    branches: [ generateExecutable ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MATHWORKS_TOKEN: gv8qAx4MC2cqxQLN3CJ0QBWgDFAUp9Ht/lf4DR2m0TyIpbYKRDOSOYi0f76X23BKPpWQLjnl4I3FGAHampAz8xaM9FHEAW4QPj37LnhMUscKmnJf2XS0p6hy4zTbM2c1UznG4/lX0xCvxx1Vvte6qg==
  MATHWORKS_ACCOUNT: kapilg@mathworks.com

jobs:
  # This workflow contains a single job called "build"
  build:

    # A job will run for all the OS present in the matrix
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-12]
    
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    # runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Sets up MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v2-beta
        with:
          products: MATLAB_Compiler_SDK

      - name: Run build
        uses: matlab-actions/run-build@v1
        with:
          tasks: checkCode createExecutable

      # - name: Upload generated binary
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: QuadraticSolver-${{ matrix.os }}-${{ matrix.release}}
      #     path: quadraticSolver*

      # - name: Download generated binary
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: QuadraticSolver-${{ matrix.os }}-${{ matrix.release}}

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v-${{ matrix.os }}-${{github.run_id}}
      #     release_name: Release-${{ matrix.os }}-${{github.run_id}}
      #     draft: false
      #     prerelease: false

      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: quadraticSolver
      #     asset_name: QuadraticSolver-${{ matrix.os }}
      #     asset_content_type: application/octet-stream

      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);
            
            const fs = require('fs').promises;
            
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: v-${{ matrix.os }}-${{github.run_id}}
              release_name: Release-${{ matrix.os }}-${{github.run_id}}
              draft: false,
              target_commitish: sha
            });

            console.log('created release', { release });
        
            for (let file of await fs.readdir('.')) {
              let fileName = file.replace(/\.[^/.]+$/, "")
              if(fileName == "quadraticSolver"){
                console.log('uploading', file);

                await github.repos.uploadReleaseAsset({
                  owner, repo,
                  release_id: release.data.id,
                  name: file,
                  data: await fs.readFile(`./${file}`)
                });            
              }
            }

      # - name: Upload binary to Gitlab Package Registry
      #   env:
      #     PRIVATE_TOKEN: ${{ secrets.PRIVATE_TOKEN}}
      #   run: |
      #     GITLAB_API_URL = "https://gitlab.com/api/v4/tsharma"
      #     GITLAB_PROJECT_ID = "82064"
      #     PACKAGE_NAME = "Executable"
      #     PACKAGE_VERSION = "1.0.0"
      #     BINARY_PATH = "./quadraticSolver"
      #     FILE_NAME = "quadraticSolver"

      #     curl --header "JOB-TOKEN: $PRIVATE_TOKEN" \ --upload-file "$BINARY_PATH" \ "$GITLAB_API_URL/$GITLAB_PROJECT_ID/packages/generic/$PACKAGE_NAME/$PACKAGE_VERSION/$FILE_NAME"
      
        
