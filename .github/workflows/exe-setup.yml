# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ generateExecutable ]
  pull_request:
    branches: [ generateExecutable ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MATHWORKS_TOKEN: gv8qAx4MC2cqxQLN3CJ0QBWgDFAUp9Ht/lf4DR2m0TyIpbYKRDOSOYi0f76X23BKPpWQLjnl4I3FGAHampAz8xaM9FHEAW4QPj37LnhMUscKmnJf2XS0p6hy4zTbM2c1UznG4/lX0xCvxx1Vvte6qg==
  MATHWORKS_ACCOUNT: kapilg@mathworks.com

jobs:
  # This workflow contains a single job called "build"
  build:

    # A job will run for all the OS present in the matrix
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest] # macos-12
    
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      
      # Sets up MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v2-beta
        with:
          products: MATLAB_Compiler_SDK

      - name: Run build
        uses: matlab-actions/run-build@v1
        with:
          tasks: checkCode createExecutable

      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            
            const fs = require('fs').promises;
  
            const { repo: { owner, repo }, sha } = context;

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: "Binary-${{ matrix.os }}-${{github.run_id}}",
              release_name: "R-${{github.run_id}}",
              target_commitish: sha
            });

            for (let file of await fs.readdir('.')) {
              const fileName = file.replace(/\.[^/.]+$/, "")
              if(fileName == "quadraticSolver"){
                console.log('uploading', file);

                await github.repos.uploadReleaseAsset({
                  owner, repo,
                  release_id: release.data.id,
                  name: file,
                  data: await fs.readFile(`./${file}`)
                });            
              }
            }